name: Nightly Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: adminpassword
          POSTGRES_DB: bookly
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6.2
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "sqlmodel[asyncio]"
          pip install -r requirements.txt

      - name: Run Migrations
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U admin; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          alembic upgrade head

      - name: Run Tests
        env:
          DATABASE_URL: postgresql+asyncpg://admin:adminpassword@localhost:5432/bookly
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret
          JWT_ALGORITHM: HS256
        run: |
          pytest -v
#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: "3.10"
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#          python -m pip install pytest
#
#      - name: Run Tests
#        run: pytest

#      - name: Build Docker Image
#        if: success()
#        run: docker build -t your-docker-username/fastapi-beyond-crud:latest .
#
#      - name: Login to Docker Hub
#        if: success()
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Push to Docker Hub
#        if: success()
#        run: docker push your-docker-username/fastapi-beyond-crud:latest

#      - name: Send Email on Failure
#        if: failure()
#        run: |
#          curl --request POST \
#          --url https://api.sendgrid.com/v3/mail/send \
#          --header "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
#          --header "Content-Type: application/json" \
#          --data '{
#            "personalizations": [{"to": [{"email": "your-email@example.com"}]}],
#            "from": {"email": "no-reply@yourdomain.com"},
#            "subject": "Nightly Build Failed",
#            "content": [{"type": "text/plain", "value": "The nightly build has failed. Please check logs."}]
#          }'
